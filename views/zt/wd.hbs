<!DOCTYPE html>
<html style=" width: 100%;">
<head>
    <meta charset="utf-8">
    <meta content="yes" name="apple-mobile-web-app-capable">
    <meta content="yes" name="apple-touch-fullscreen">
    <meta content="telephone=no,email=no" name="format-detection">
    <meta name="App-Config" content="fullscreen=yes,useHistoryState=yes,transition=yes">
    <title>{{title}}</title>
    <meta name="viewport" content="initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no">
    <style>
        body, html {
            background: #e73d40;
            padding: 0;
            margin: 0;

        }

        body {
            -webkit-overflow-scrolling: touch;
            height: 100%;
        }

        .bg {
            display: block;
            width: 100%;
            margin: 0px auto;
        }

        .p {
            width: 50%;
            display: block;
            -webkit-border-radius: 100%;
            -moz-border-radius: 100%;
            border-radius: 100%;
            border: 8px solid #c3282f;
            position: absolute;
            top: 0;
            left: 50%;
            margin-left: -25%;
        }

        .title {
            color: #fff;
            font-weight: bold;
            font-size: 3em;
            line-height: 1.2em;
            text-align: center;
            margin-top: -100px;
        }

        .content {
            color: #fff;
            font-size: 2.5em;
            text-align: left;

        }

        .timeandaddress {
            color: #fff;
            font-size: 2em;
            margin: 0;
        }

        audio {
            display: none;
        }

        .wrapper {
            margin: 0 auto;
            width: {{wd}};
        }

        .msg {
            color: #fff;
            padding: 8px 0;
            font-size: 1.5em;
            margin: 0px;
        }

        .img-box img {
            display: block;
            width: 100%;
            margin: 5px auto;
            border: none;
        }

        .content-box {
            width: 90%;
            -webkit-border-radius: 20px;
            -moz-border-radius: 20px;
            border-radius: 20px;
            padding: 15px;
            background: #c3282f;
            margin: 10px auto 20px;
        }

        #caraudio {
            display: none;
        }

        canvas {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 10;
            border: none;
        }

        @media only screen and (max-width: 300px) {
            body {
                font-size: 8.33333px
            }

            .viewport {
                max-width: 300px
            }
        }

        @media only screen and (max-width: 310px) and (min-width: 300px) {
            body {
                font-size: 8.33333px
            }

            .viewport {
                max-width: 300px
            }
        }

        @media only screen and (max-width: 320px) and (min-width: 310px) {
            body {
                font-size: 8.88889px
            }

            .viewport {
                max-width: 320px
            }
        }

        @media only screen and (max-width: 360px) and (min-width: 320px) {
            body {
                font-size: 8.88889px
            }

            .viewport {
                max-width: 360px
            }
        }

        @media only screen and (max-width: 360px) and (min-width: 350px) {
            body {
                font-size: 10px
            }

            .viewport {
                max-width: 360px
            }
        }

        @media only screen and (max-width: 480px) and (min-width: 360px) {
            body {
                font-size: 10px
            }

            .viewport {
                max-width: 480px
            }
        }

        @media only screen and (max-width: 480px) and (min-width: 470px) {
            body {
                font-size: 13.33333px
            }

            .viewport {
                max-width: 480px
            }
        }

        @media only screen and (max-width: 560px) and (min-width: 480px) {
            body {
                font-size: 13.33333px
            }

            .viewport {
                max-width: 560px
            }
        }

        @media only screen and (max-width: 570px) and (min-width: 560px) {
            body {
                font-size: 15.83333px
            }

            .viewport {
                max-width: 570px
            }
        }

        @media only screen and (max-width: 640px) and (min-width: 570px) {
            body {
                font-size: 15.83333px
            }

            .viewport {
                max-width: 640px
            }
        }

        @media only screen and (max-width: 640px) and (min-width: 630px) {
            body {
                font-size: 17.77778px; /*0.05624*/
            }

            .viewport {
                max-width: 640px
            }
        }

        @media only screen and (max-width: 710px) and (min-width: 640px) {
            body {
                font-size: 17.77778px
            }

            .viewport {
                max-width: 710px
            }
        }

        .canvasbox {
            position: relative;
            overflow: hidden;
            width: 100%;
            margin: -65% auto 0;
            overflow: hidden;
        }

        .canvasbox img {
            width: 100%;
            display: block;
        }

        .canvasbox img.p {
            width: 50%;
            top: 50%;
            margin-top: -25%;

        }

        #pinkboard {
            position: absolute;
            bottom: 0;
        }

    </style>
</head>
<body>
<div id="wrapper" class="wrapper">
    <audio id="caraudio" autoplay="true" controls="" loop="" preload="preload">
        <source src="/media/39.mp3" type="audio/mpeg">
    </audio>
    <img class="bg" src="/wd/ibg1.png" alt=""/>

    <div id="canvasbox" class="canvasbox">
        <img style="opacity: 0" src="/wd/tm.png" alt=""/>
        <img class="p" src="/wd/hj.jpg" alt=""/>
        <canvas id="pinkboard"></canvas>
    </div>


    <h1 class="title">黄家金 & 严珍</h1>

    <div class="content-box">
        <p class="timeandaddress">
            婚礼时间：2015年12月15日 12时00分<br>
            地点：福州市闽清县石湖村<br>
            电话：18059178863
        </p>


        <div class="content">诚挚邀请</div>
        <p class="msg">
            尊敬的亲朋好友，新郎黄家金与新娘严珍郑重的邀请您参加我们的婚礼，望您在百忙之中抽出空闲前来参加，我们用心准备了惊喜和礼物，真心期待您分享我们的甜蜜。
        </p>
    </div>
    <div class="img-box">
        <img src="/wd/hj.jpg" alt=""/>
        <img src="/wd/hj.jpg" alt=""/>
        <img src="/wd/hj.jpg" alt=""/>
        <img src="/wd/hj.jpg" alt=""/>
        <img src="/wd/hj.jpg" alt=""/>
        <img src="/wd/hj.jpg" alt=""/>
        <img src="/wd/hj.jpg" alt=""/>
        <img src="/wd/hj.jpg" alt=""/>
        <img src="/wd/hj.jpg" alt=""/>
    </div>

</div>
<canvas id="canvas"></canvas>
<script src="/js/zepto.min.js"></script>

<script>
    /*
        $("body").on('click', function () {
            $('#car_audio')[0].play();
        });
    */

    /*    document.onload=function(){
            (document.getElementById('#caraudio')).play();
        }*/


    /*    (function () {
            var requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame ||
                    function (callback) {
                        window.setTimeout(callback, 1000 / 60);
                    };
            window.requestAnimationFrame = requestAnimationFrame;
        })();*/


    var flakes = [],
            canvas = document.getElementById("canvas"),
            ctx = canvas.getContext("2d"),
            flakeCount = 100,
            mX = -100,
            mY = -100;

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    function snow() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        for (var i = 0; i < flakeCount; i++) {
            var flake = flakes[i],
                    x = mX,
                    y = mY,
                    minDist = 150,
                    x2 = flake.x,
                    y2 = flake.y;

            var dist = Math.sqrt((x2 - x) * (x2 - x) + (y2 - y) * (y2 - y)),
                    dx = x2 - x,
                    dy = y2 - y;

            if (dist < minDist) {
                var force = minDist / (dist * dist),
                        xcomp = (x - x2) / dist,
                        ycomp = (y - y2) / dist,
                        deltaV = force / 2;

                flake.velX -= deltaV * xcomp;
                flake.velY -= deltaV * ycomp;

            } else {
                flake.velX *= .98;
                if (flake.velY <= flake.speed) {
                    flake.velY = flake.speed
                }
                flake.velX += Math.cos(flake.step += .05) * flake.stepSize;
            }

            ctx.fillStyle = "rgba(255,255,255," + flake.opacity + ")";
            flake.y += flake.velY;
            flake.x += flake.velX;

            if (flake.y >= canvas.height || flake.y <= 0) {
                reset(flake);
            }


            if (flake.x >= canvas.width || flake.x <= 0) {
                reset(flake);
            }

            ctx.beginPath();
            ctx.arc(flake.x, flake.y, flake.size, 0, Math.PI * 2);
            ctx.fill();
        }
        requestAnimationFrame(snow);
    }
    ;

    function reset(flake) {
        flake.x = Math.floor(Math.random() * canvas.width);
        flake.y = 0;
        flake.size = (Math.random() * 3) + 2;
        flake.speed = (Math.random() * 1) + 0.5;
        flake.velY = flake.speed;
        flake.velX = 0;
        flake.opacity = (Math.random() * 0.5) + 0.3;
    }

    function init() {
        for (var i = 0; i < flakeCount; i++) {
            var x = Math.floor(Math.random() * canvas.width),
                    y = Math.floor(Math.random() * canvas.height),
                    size = (Math.random() * 3) + 2,
                    speed = (Math.random() * 1) + 0.5,
                    opacity = (Math.random() * 0.5) + 0.3;

            flakes.push({
                speed: speed,
                velY: speed,
                velX: 0,
                x: x,
                y: y,
                size: size,
                stepSize: (Math.random()) / 30,
                step: 0,
                opacity: opacity
            });
        }

        snow();
    }
    ;

    canvas.addEventListener("mousemove", function (e) {
        mX = e.clientX,
                mY = e.clientY
    });

    window.addEventListener("resize", function () {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    })

    init();
</script>

<script>

    /*
 * Settings
 */

    $(function () {


        var settings = {
            particles: {
                length: 200, // maximum amount of particles
                duration: 2, // particle duration in sec
                velocity: 100, // particle velocity in pixels/sec
                effect: -0.75, // play with this for a nice effect
                size: 30 // particle size in pixels
            }
        };
        document.querySelector('#pinkboard').height = document.getElementById('canvasbox').style.height;

        /*
         * RequestAnimationFrame polyfill by Erik Möller
         */
        (function () {
            var b = 0;
            var c = ["ms", "moz", "webkit", "o"];
            for (var a = 0; a < c.length && !window.requestAnimationFrame; ++a) {
                window.requestAnimationFrame = window[c[a] + "RequestAnimationFrame"];
                window.cancelAnimationFrame = window[c[a] + "CancelAnimationFrame"] || window[c[a] + "CancelRequestAnimationFrame"]
            }
            if (!window.requestAnimationFrame) {
                window.requestAnimationFrame = function (h, e) {
                    var d = new Date().getTime();
                    var f = Math.max(0, 16 - (d - b));
                    var g = window.setTimeout(function () {
                        h(d + f)
                    }, f);
                    b = d + f;
                    return g
                }
            }
            if (!window.cancelAnimationFrame) {
                window.cancelAnimationFrame = function (d) {
                    clearTimeout(d)
                }
            }
        }());

        /*
         * Point class
         */
        var Point = (function () {
            function Point(x, y) {
                this.x = (typeof x !== 'undefined') ? x : 0;
                this.y = (typeof y !== 'undefined') ? y : 0;
            }

            Point.prototype.clone = function () {
                return new Point(this.x, this.y);
            };
            Point.prototype.length = function (length) {
                if (typeof length == 'undefined')
                    return Math.sqrt(this.x * this.x + this.y * this.y);
                this.normalize();
                this.x *= length;
                this.y *= length;
                return this;
            };
            Point.prototype.normalize = function () {
                var length = this.length();
                this.x /= length;
                this.y /= length;
                return this;
            };
            return Point;
        })();

        /*
         * Particle class
         */
        var Particle = (function () {
            function Particle() {
                this.position = new Point();
                this.velocity = new Point();
                this.acceleration = new Point();
                this.age = 0;
            }

            Particle.prototype.initialize = function (x, y, dx, dy) {
                this.position.x = x;
                this.position.y = y;
                this.velocity.x = dx;
                this.velocity.y = dy;
                this.acceleration.x = dx * settings.particles.effect;
                this.acceleration.y = dy * settings.particles.effect;
                this.age = 0;
            };
            Particle.prototype.update = function (deltaTime) {
                this.position.x += this.velocity.x * deltaTime;
                this.position.y += this.velocity.y * deltaTime;
                this.velocity.x += this.acceleration.x * deltaTime;
                this.velocity.y += this.acceleration.y * deltaTime;
                this.age += deltaTime;
            };
            Particle.prototype.draw = function (context, image) {
                function ease(t) {
                    return (--t) * t * t + 1;
                }

                var size = image.width * ease(this.age / settings.particles.duration);
                context.globalAlpha = 1 - this.age / settings.particles.duration;
                context.drawImage(image, this.position.x - size / 2, this.position.y - size / 2, size, size);
            };
            return Particle;
        })();

        /*
         * ParticlePool class
         */
        var ParticlePool = (function () {
            var particles,
                    firstActive = 0,
                    firstFree = 0,
                    duration = settings.particles.duration;

            function ParticlePool(length) {
                // create and populate particle pool
                particles = new Array(length);
                for (var i = 0; i < particles.length; i++)
                    particles[i] = new Particle();
            }

            ParticlePool.prototype.add = function (x, y, dx, dy) {
                particles[firstFree].initialize(x, y, dx, dy);

                // handle circular queue
                firstFree++;
                if (firstFree == particles.length) firstFree = 0;
                if (firstActive == firstFree) firstActive++;
                if (firstActive == particles.length) firstActive = 0;
            };
            ParticlePool.prototype.update = function (deltaTime) {
                var i;

                // update active particles
                if (firstActive < firstFree) {
                    for (i = firstActive; i < firstFree; i++)
                        particles[i].update(deltaTime);
                }
                if (firstFree < firstActive) {
                    for (i = firstActive; i < particles.length; i++)
                        particles[i].update(deltaTime);
                    for (i = 0; i < firstFree; i++)
                        particles[i].update(deltaTime);
                }

                // remove inactive particles
                while (particles[firstActive].age >= duration && firstActive != firstFree) {
                    firstActive++;
                    if (firstActive == particles.length) firstActive = 0;
                }


            };
            ParticlePool.prototype.draw = function (context, image) {
                // draw active particles
                if (firstActive < firstFree) {
                    for (i = firstActive; i < firstFree; i++)
                        particles[i].draw(context, image);
                }
                if (firstFree < firstActive) {
                    for (i = firstActive; i < particles.length; i++)
                        particles[i].draw(context, image);
                    for (i = 0; i < firstFree; i++)
                        particles[i].draw(context, image);
                }
            };
            return ParticlePool;
        })();

        /*
         * Putting it all together
         */
        (function (canvas) {
            var context = canvas.getContext('2d'),
                    particles = new ParticlePool(settings.particles.length),
                    particleRate = settings.particles.length / settings.particles.duration, // particles/sec
                    time;

            // get point on heart with -PI <= t <= PI
            function pointOnHeart(t) {
                return new Point(
                        160 * Math.pow(Math.sin(t), 3),
                        130 * Math.cos(t) - 50 * Math.cos(2 * t) - 20 * Math.cos(3 * t) - 10 * Math.cos(4 * t) + 25
                );
            }

            // creating the particle image using a dummy canvas
            var image = (function () {
                var canvas = document.createElement('canvas'),
                        context = canvas.getContext('2d');
                canvas.width = settings.particles.size;
                canvas.height = settings.particles.size;
                // helper function to create the path
                function to(t) {
                    var point = pointOnHeart(t);
                    point.x = settings.particles.size / 2 + point.x * settings.particles.size / 350;
                    point.y = settings.particles.size / 2 - point.y * settings.particles.size / 350;
                    return point;
                }

                // create the path
                context.beginPath();
                var t = -Math.PI;
                var point = to(t);
                context.moveTo(point.x, point.y);
                while (t < Math.PI) {
                    t += 0.01; // baby steps!
                    point = to(t);
                    context.lineTo(point.x, point.y);
                }
                context.closePath();
                // create the fill
                context.fillStyle = '#ea80b0';
                context.fill();
                // create the image
                var image = new Image();
                image.src = canvas.toDataURL();
                return image;
            })();

            // render that thing!
            function render() {
                // next animation frame
                requestAnimationFrame(render);

                // update time
                var newTime = new Date().getTime() / 1000,
                        deltaTime = newTime - (time || newTime);
                time = newTime;

                // clear canvas
                context.clearRect(0, 0, canvas.width, canvas.height);

                // create new particles
                var amount = particleRate * deltaTime;
                for (var i = 0; i < amount; i++) {
                    var pos = pointOnHeart(Math.PI - 2 * Math.PI * Math.random());
                    var dir = pos.clone().length(settings.particles.velocity);
                    particles.add(canvas.width / 2 + pos.x, canvas.height / 2 - pos.y, dir.x, -dir.y);
                }

                // update and draw particles
                particles.update(deltaTime);
                particles.draw(context, image);
            }

            // handle (re-)sizing of the canvas
            function onResize() {
                canvas.width = canvas.clientWidth;
                canvas.height = canvas.clientHeight;
            }

            window.onresize = onResize;

            // delay rendering bootstrap
            setTimeout(function () {
                onResize();
                render();
            }, 10);
        })(document.getElementById('pinkboard'));

    })
</script>
</body>
</html>